-- create table companies (
-- 	company_name VARCHAR(50),
-- 	founded_year INT,
-- 	ceo VARCHAR(50),
-- 	headquarters_city VARCHAR(50),
-- 	revenue VARCHAR(50),
-- 	number_of_employees INT,
-- 	stock_symbol VARCHAR(50),
-- 	technology_stack VARCHAR(10)
-- );
-- SELECT * FROM companies;
-- SELECT * FROM companies WHERE founded_year = 2000;
-- SELECT * FROM companies WHERE founded_year > 2000;
-- SELECT * FROM companies WHERE number_of_employees > 100000;
-- SELECT * FROM companies WHERE revenue = 'Euro';
-- SELECT * FROM companies WHERE technology_stack = 'Python';

-- UPDATE building SET address = 'New!' WHERE id = 2;
-- UPDATE building SET address = 'New!', material = 'Beton' WHERE id = 2;

-- -- SELECT * FROM building ORDER BY id ASC; -- ASC - Ascending - По возрастанию
-- SELECT * FROM building ORDER BY id DESC; -- DESC - Descending - По убыванию

-- SELECT * FROM companies WHERE headquarters_city = 'San Antonio';
-- UPDATE companies SET number_of_employees = 15000 WHERE headquarters_city = 'San Antonio';
-- UPDATE companies SET technology_stack = 'C++' WHERE revenue = 'Sol'
-- SELECT companies, founded_year FROM companies ORDER BY founded_year ASC;


-- SELECT * FROM companies WHERE technology_stack = 'Python';
-- UPDATE companies SET founded_year = 1991 WHERE technology_stack = 'Python'
-- SELECT * FROM companies WHERE headquarters_city = 'San Antonio'
-- UPDATE companies SET revenue = 'Dollar' WHERE headquarters_city = 'San Antonio'
-- UPDATE companies SET number_of_employees = number_of_employees/2 WHERE revenue = 'Euro';
-- SELECT * FROM companies WHERE revenue = 'Euro';

-- CREATE TABLE employers(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255),
-- 	salary INTEGER,
-- 	position VARCHAR(255)
-- );
-- CREATE TABLE dishes(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	price INTEGER,
-- 	calories INTEGER,
-- 	cook_id INTEGER,
-- 	FOREIGN KEY(cook_id) REFERENCES employers(id)
-- );
-- INSERT INTO employers (name, surname, salary, position) VALUES ('Roman', 'Penkov', 500000, 'Conditer'),
-- ('Leonid', 'Varonin', 400000, 'Povar'), ('Valera', 'Pupkin', 300000, 'Sushist');
-- INSERT INTO dishes (name, price, calories, cook_id) VALUES ('Takos', 300, 400, 2), ('Cake', 500, 1000, 1), ('Sushi', 500, 200, 3);
-- SELECT dishes.name FROM dishes
-- 	JOIN employers ON dishes.cook_id = employers.id
-- 	WHERE employers.position = 'chef';
-- drop table dishes;drop table employers;
-- _______________________________________________________________________

-- CREATE TABLE positions(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(225),
-- 	salary INTEGER
-- );

-- CREATE TABLE employers(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255),
-- 	position_id INTEGER,
-- 	FOREIGN KEY (position_id) REFERENCES positions(id)
-- );
-- CREATE TABLE dishes(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(225),
-- 	price INTEGER,
-- 	calories INTEGER,
-- 	cook_id INTEGER,
-- 	FOREIGN KEY (cook_id) REFERENCES employers(id)
-- );
-- SELECT dishes.name FROM dishes
-- 	JOIN employers ON dishes.cook_id = employers.id
-- 	WHERE employers.position = 'chef';

-- SELECT dishes.name FROM dishes
-- JOIN employers ON dishes.cook_id = employers.id
-- JOIN positions ON employers.position_id = positions.id
-- WHERE positions.name = 'Chef'

-- SELECT dishes.name, price FROM dishes
-- JOIN employers ON dishes.cook_id = employers.id
-- JOIN positions ON employers.position_id = positions.id
-- WHERE positions.name = 'Line Cook' AND dishes.price > 20;

SELECT employers.name, employers.surname, positions.salary FROM employers
JOIN positions ON employers.position_id = positions.id
WHERE positions.salary > 60000;

-- CREATE TABLE users(
-- 	id SERIAL PRIMARY KEY,
-- 	username CHARACTER VARYING(225),
-- 	role CHARACTER VARYING(225),
-- 	created_at TIMESTAMP
-- );
-- CREATE TABLE posts(
-- 	id SERIAL PRIMARY KEY,
-- 	title CHARACTER VARYING(225),
-- 	body TEXT,
-- 	user_id INTEGER,
-- 	status CHARACTER VARYING(225),
-- 	created_at TIMESTAMP,
-- 	FOREIGN KEY (user_id) REFERENCES users(id)
-- );

-- CREATE TABLE follows(
-- 	following_user_id INTEGER,
-- 	followed_user_id INTEGER,
-- 	created_at TIMESTAMP,
-- 	FOREIGN KEY (following_user_id) REFERENCES users(id),
-- 	FOREIGN KEY (followed_user_id) REFERENCES users(id)
-- );

-- Foreign Key -> One-to-Many/Many-to-One
-- CREATE TABLE computers(
-- 	id SERIAL PRIMARY KEY,
-- 	operation_system VARCHAR(100),
-- 	serial_number VARCHAR(255)
-- );

-- CREATE TABLE employers(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255),
-- 	computer_id INTEGER UNIQUE,  -- UNIQUE - Без повторов
-- 	FOREIGN KEY(computer_id) REFERENCES computers(id)
-- )

-- SELECT serial_number FROM computers
-- JOIN computers.id ON computers.id != employers.computer_id

-- CREATE TABLE emails(
-- 	id SERIAL PRIMARY KEY,
-- 	address VARCHAR(255)
);
-- CREATE TABLE users(
-- 	id SERIAL PRIMARY KEY,
-- 	username VARCHAR(255),
-- 	email_id INTEGER UNIQUE,
-- 	FOREIGN KEY (email_id) REFERENCES emails(id)
-- );

-- CREATE TABLE follows(
-- 	id SERIAL PRIMARY KEY,
-- 	follower_id INTEGER,
-- 	following_id INTEGER,
-- 	FOREIGN KEY (follower_id) REFERENCES users(id),
-- 	FOREIGN KEY (follower_id) REFERENCES users(id)
-- )

SELECT emails.address FROM follows
JOIN users ON follows.follower_id = users.id
JOIN emails ON follows.following_id = emails.id
WHERE users.username = 'username1';

SELECT address FROM emails
	WHERE id in (SELECT email_id FROM users
				 WHERE id IN (SELECT following_id FROM follows
							  WHERE follower_id = (SELECT id FROM users
												   WHERE username = 'username1')
							 )
				);
-- CREATE USER justcode WITH PASSWORD '1234';
-- GRANT ALL PRIVILEGES ON DATABASE postgres TO justcode;
-- GRANT ALL ON TABLE testpy TO justcode;
-- insert into testpy() VALUES ();
-- select * from testpy;
-- CREATE TABLE students(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255),
-- 	year INTEGER
-- )
-- insert into students (id, name, surname, year) VALUES (1, 'AAA', 'aaa', 25);
-- insert into students (id, name, surname, year) VALUES (2, 'BBB', 'bbb', 20);
-- insert into students (id, name, surname, year) VALUES (3, 'CCC', 'ccc', 23);
-- GRANT ALL ON SEQUENCE students.id TO justcode;
-- GRANT ALL ON SEQUENCE students_id_seq TO justcode;
SELECT * FROM students;

-- CREATE TABLE genres(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255)
-- );
-- CREATE TABLE directors(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255)
-- );
-- CREATE TABLE films(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	year INTEGER,
-- 	genre_id INTEGER,
-- 	FOREIGN KEY(genre_id) REFERENCES genres(id),
-- 	director_id INTEGER,
-- 	FOREIGN KEY(director_id) REFERENCES directors(id)
-- );
-- INSERT INTO genres(name) VALUES('Комедии');
-- INSERT INTO genres(name) VALUES('Мультфильмы');
-- INSERT INTO genres(name) VALUES('Ужасы');
-- INSERT INTO genres(name) VALUES('Фантастика');
-- INSERT INTO genres(name) VALUES('Триллеры');
-- INSERT INTO genres(name) VALUES('Боевики');
-- INSERT INTO genres(name) VALUES('Мелодрамы');
-- INSERT INTO genres(name) VALUES('Детективы');


-- CREATE TABLE genres(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255)
-- );
-- CREATE TABLE directors(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	surname VARCHAR(255)
-- );
-- CREATE TABLE films(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	year INTEGER,
-- 	genre_id INTEGER,
-- 	FOREIGN KEY(genre_id) REFERENCES genres(id),
-- 	director_id INTEGER,
-- 	FOREIGN KEY(director_id) REFERENCES directors(id)
-- );
-- INSERT INTO genres(name) VALUES('Комедии');
-- INSERT INTO genres(name) VALUES('Мультфильмы');
-- INSERT INTO genres(name) VALUES('Ужасы');
-- INSERT INTO genres(name) VALUES('Фантастика');
-- INSERT INTO genres(name) VALUES('Триллеры');
-- INSERT INTO genres(name) VALUES('Боевики');
-- INSERT INTO genres(name) VALUES('Мелодрамы');
-- INSERT INTO genres(name) VALUES('Детективы');
SELECT*FROM films








-- CREATE TABLE dishes (
--   id SERIAL PRIMARY KEY,
--   name VARCHAR(255),
--   weight INTEGER,
--   price DECIMAL(8,2)
-- );

-- CREATE TABLE ingredients (
--   id SERIAL PRIMARY KEY,
--   name VARCHAR(255)
-- );

-- CREATE TABLE dishes_ingredients (
--   id SERIAL PRIMARY KEY,
--   dish_id INTEGER,
--   FOREIGN KEY (dish_id) REFERENCES dishes (id),
--   ingredient_id INTEGER,
--   FOREIGN KEY (ingredient_id) REFERENCES ingredients (id)
-- );

-- CREATE TABLE guests (
--   id SERIAL PRIMARY KEY,
--   name VARCHAR(255),
--   surname VARCHAR(255),
--   phone VARCHAR(20),
--   discount INTEGER
-- );

-- CREATE TABLE orders (
--   id SERIAL PRIMARY KEY,
--   datetime TIMESTAMP,
--   address TEXT,
--   guest_id INTEGER,
--   FOREIGN KEY (guest_id) REFERENCES guests (id),
--   total DECIMAL(8,2)
-- );

-- CREATE TABLE dishes_orders (
--   id SERIAL PRIMARY KEY,
--   dish_id INTEGER,
--   FOREIGN KEY (dish_id) REFERENCES dishes (id),
--   order_id INTEGER,
--   FOREIGN KEY (order_id) REFERENCES orders (id),
--   amount INTEGER
-- );
-- INSERT INTO ingredients(name) VALUES('Potato');
-- INSERT INTO ingredients(name) VALUES('Meat');
-- INSERT INTO ingredients(name) VALUES('Chicken');
-- INSERT INTO ingredients(name) VALUES('Onion');
-- INSERT INTO ingredients(name) VALUES('Garlic');
-- INSERT INTO ingredients(name) VALUES('Rice');
-- INSERT INTO ingredients(name) VALUES('Buckwheat');
-- INSERT INTO ingredients(name) VALUES('Cucumber');
-- INSERT INTO ingredients(name) VALUES('Tomato');
-- INSERT INTO ingredients(name) VALUES('Pepper');
-- INSERT INTO ingredients(name) VALUES('Pasta');
-- INSERT INTO ingredients(name) VALUES('Cabbage');
-- INSERT INTO ingredients(name) VALUES('Lemon');
-- INSERT INTO dishes (name, weight, price) VALUES ('Chicken Fried Rice', 300, 11.99);
-- INSERT INTO dishes (name, weight, price) VALUES ('Beef Stroganoff', 350, 14.99);
-- INSERT INTO dishes (name, weight, price) VALUES ('Potato and Cabbage Stew', 400, 10.49);
-- INSERT INTO dishes (name, weight, price) VALUES ('Tomato Basil Pasta', 280, 12.49);
-- INSERT INTO dishes (name, weight, price) VALUES ('Chicken Cucumber Salad', 250, 9.99);
-- Linking Beef Stroganoff (dish_id = 2)
INSERT INTO dishes_ingredients (dish_id, ingredient_id)
VALUES
  (1, 3),  -- Chicken
  (1, 6),  -- Rice
  (1, 4),  -- Onion
  (1, 5);  -- Garlic
-- INSERT INTO dishes_ingredients (dish_id, ingredient_id)
-- VALUES
--   (2, 2),  -- Meat
--   (2, 4),  -- Onion
--   (2, 5),  -- Garlic
--   (2, 1);  -- Potato

-- -- Linking Potato and Cabbage Stew (dish_id = 3)
-- INSERT INTO dishes_ingredients (dish_id, ingredient_id)
-- VALUES
--   (3, 1),  -- Potato
--   (3, 12), -- Cabbage
--   (3, 4),  -- Onion
--   (3, 5);  -- Garlic

-- -- Linking Tomato Basil Pasta (dish_id = 4)
-- INSERT INTO dishes_ingredients (dish_id, ingredient_id)
-- VALUES
--   (4, 11), -- Pasta
--   (4, 9), -- Tomato
--   (4, 10), -- Pepper
--   (4, 5);  -- Garlic

-- -- Linking Chicken Cucumber Salad (dish_id = 5)
-- INSERT INTO dishes_ingredients (dish_id, ingredient_id)
-- VALUES
--   (5, 3),  -- Chicken
--   (5, 8),  -- Cucumber
--   (5, 9), -- Tomato
--   (5, 13); -- Lemon

-- SELECT * FROM dishes_orders
-- SELECT * FROM orders
-- SELECT * FROM guests
-- SELECT * FROM dishes
-- SELECT id FROM guests WHERE telegram_id='2063536213' ORDER BY id DESC
-- SELECT id FROM orders WHERE status='Creating' AND guest_id = 6

-- Вывести заказ по guests.id со статусом creating
-- выведим guests.name, guests.surname заказал dishes_orders.dish_id x dishes_orders.amaount

SELECT guests.name, guests.surname, dishes.name, dishes_orders.amount FROM orders
 JOIN dishes_orders ON orders.id = dishes_orders.order_id
 JOIN guests ON orders.guest_id = guests.id
 JOIN dishes ON dishes_orders.dish_id = dishes.id
 WHERE guests.phone ='7777654321' AND orders.status = 'Creating'
-- JOIN dishes_orders ON guests.id = dishes_orders.